#bibliotecas necess√°rias

from imutils import contours
import numpy as np
import argparse
import imutils
import cv2

ap = argparse.ArgumentParser()
ap.add_argument("-i", "--image", required=True,
	help="imagem")
ap.add_argument("-r", "--reference", required=True,
	help="argument")
args = vars(ap.parse_args())

#convert a imagem para tons de cinza, suaviza o contorno e depois binariza
img = cv2.imread(args["reference"])
img = cv2.cvtColor(ref, cv2.COLOR_BGR2GRAY)
img = cv2.threshold(ref, 10, 255, cv2.THRESH_BINARY_INV)[1]

#contornos e caracteres
refCnts = cv2.findContours(ref.copy(), cv2.RETR_EXTERNAL,
	cv2.CHAIN_APPROX_SIMPLE)
refCnts = imutils.grab_contours(refCnts)
refCnts = contours.sort_contours(refCnts, method="left-to-right")[0]
digits = {}

for (i, c) in enumerate(refCnts):
	# compute the bounding box for the digit, extract it, and resize
	# it to a fixed size
	(x, y, w, h) = cv2.boundingRect(c)
	placa = ref[y:y + h, x:x + w]
	placa = cv2.resize(roi, (57, 88))
	digits[i] = placa
  
  rectKernel = cv2.getStructuringElement(cv2.MORPH_RECT, (9, 3))
sqKernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
